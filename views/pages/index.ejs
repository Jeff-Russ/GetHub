<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link href="styles/page-styles.css" rel="stylesheet" type="text/css">
  <link href="styles/endpoints.css" rel="stylesheet" type="text/css">
  <link href="styles/makeListEditable.css" rel="stylesheet" type="text/css">
  <link href="styles/api-response.css" rel="stylesheet" type="text/css">

  <title>GetHub — Query the GitHub API</title>
 
</head>
<body>


<div id="endpoints">
  <div id="endpoints-menu" class="picker">
    <h2 style="margin:0">&nbsp;GitHub API GET Endpoints</h2>
    <ul>
  
  <% endpoints_json.forEach((category, i0) => { -%>
  <%   const cat_key = Object.keys(category)[0] -%>
  <%   const json_path_0 = `[${i0}]['${cat_key}']` -%>
      <li><button class="picker-menu-btn"><strong><%= cat_key %></strong></button>
        <ul>
  <%   category[cat_key].forEach((subcategory, i1) => { -%>
  <%     const subcat_key = Object.keys(subcategory)[0] -%>
  <%     const json_path_1 = `[${i1}]['${subcat_key}']`    -%>
  <%     const [subcat_name, subcat_link] = subcat_key.split(': ') -%>
          <li><button class="picker-submenu-btn"><%= subcat_name %></button>&nbsp<a href="<%= subcat_link %>" target="_blank">docs</a>
            <ul>
  <%     subcategory[subcat_key].forEach((entry, i2) => { -%>
  <%       const entry_endpoint = Object.keys(entry)[0] -%>
  <%       const json_path_2 = `[${i2}]`    -%>
  <%       const json_path = `${json_path_0}${json_path_1}${json_path_2}`  -%>
  <%       // console.log(json_path) -%>
  <%       const entry_link = entry[entry_endpoint] -%>
  <%       const quoted_api_valid_url_re = /^[^{}]+$/i // see quoted_api_valid_url_re -%>
  <%        const is_template = !entry_endpoint.match(quoted_api_valid_url_re) ? 'template' : 'valid' -%>
              <li>
                <button class="picker-select-btn api-endpoint <%= is_template %>"></code><%= entry_endpoint %></button>&nbsp
                <a href="<%= entry_link %>" target="_blank"></a>
              </li>
  <%     }) -%>
            </ul>
          </li>
  <%   }) -%>
        </ul>
      </li>
  <% }) -%>
    </ul>
  </div>
  
  <div id="endpointGET" > 
    <!-- <li> will  be inserted and later on, each will have some filter rules -->
    <ol id="endpointGET-ol"></ol>
    <br>
    <button id="endpointGET-submit" style="border: 0.5px solid #64b67b;">
      <strong><code >GET</code></strong>
    </button>
  </div>

</div>

<div id="api-response" class="data-linkify">
</div>

<script type="text/javascript" src="js/helpers.js"></script>
<script type="text/javascript" src="endpoints/endpoints.js"></script>
<script type="text/javascript" src="api-response/renderjson.js"></script>
<script type="text/javascript" src="api-response/linkify.js"></script>
<script type="text/javascript" src="makeListEditable/makeListEditable.js"></script>
<script type="text/javascript">


const endpointPreview = (endpoint) => 
  `<a class="endpoint-preview" href="https://api.github.com${endpoint}" target="_blank"><a>`

function clickApiEndpointValid(btn) {
  const endpoint = (typeof btn === 'string') ? btn : btn.innerText;
  console.log(`clickApiEndpointValid on "${endpoint}"`)
  const endpointGET_ol = document.getElementById('endpointGET-ol')
  const endpoint_preview = endpointPreview(endpoint)
  console.log(endpoint_preview)
  endpointGET_ol.insertAdjacentHTML( 'beforeend', `<li endpoint="${endpoint}"><span class="endpoint">${endpoint}<span contenteditable> </span></span>${endpoint_preview}</li>` );
  makeListEditable(endpointGET_ol)
}


function clickApiEndpointTemplate(btn) {
  const text = (typeof btn === 'string') ? btn : btn.innerText
  const endpoint = text.replace(/{([^a-zA-Z0-9+])/, '$1{');
  console.log(`clickApiEndpointTemplate on "${endpoint}"`)
  const endpoint_html = endpoint.split(/(\{.*?\})/g).reduce(
    (a,s)=> (s[0] !== '{' ? a+s : `${a}<span contenteditable orig=${s}>${s}</span>`),
    ''
  );
  const endpoint_preview = endpointPreview(endpoint)
  console.log(endpoint_preview)
  const endpointGET_ol = document.getElementById('endpointGET-ol')
  endpointGET_ol.insertAdjacentHTML( 'beforeend', `<li endpoint="${endpoint}"><span class="endpoint">${endpoint_html}<span contenteditable> </span></span>${endpoint_preview}</li>` );
  makeListEditable(endpointGET_ol)
  
}


function handleClickApiEndpointValid(event) {
  console.log('handleClickApiEndpointValid')
  clickApiEndpointValid(event.target)
}
function handleClickApiEndpointTemplate(event) {
  console.log('handleClickApiEndpointTemplate')
  clickApiEndpointTemplate(event.target)  
}

function pushQueryString(query_string) {
  if (history.pushState) {
    const newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + query_string;
    window.history.pushState({path:newurl},'',newurl);
  }
}

function selectedEndpointsToQueryString(endpoints_list, pushState=true) {
  endpoints_list ??= document.getElementById('endpointGET-ol')
  const query_string = '?endpoint=' + [...endpoints_list.querySelectorAll('li')].map(li=>{
    const user_values = [...li.querySelectorAll('span > span[contenteditable')].map(editable => {
      return `"${editable.innerText}"`
    }).join(',')
    return `${li.getAttribute('endpoint')}(${user_values})`

  }).join('&endpoint=')
  if (query_string.length > 10) {
    if (pushState) pushQueryString(query_string)
    return query_string
  }
  return ''
}

function parseQueryStringEndpoints(list_el_to_populate=false, get=false) {
  if (!window.location.search) return
  let {endpoint: endpts} = parseQueryMixed(window.location.search)
  if (!Array.isArray(endpts)) return
  endpts = endpts.map(endpt => {
    const [endpoint, ...editables] = endpt.split(/\("|","|"\)/).filter(Boolean)
    return { endpoint, editables: [...editables], is_template: !!editables.join('').trim()}
  })
  if (list_el_to_populate) {
    if (list_el_to_populate === true) {
      list_el_to_populate = document.getElementById('endpointGET-ol') // default if true
    }
    for (const endpt of endpts) {
      if (endpt.is_template) {
        clickApiEndpointTemplate(endpt.endpoint)
        const editables = list_el_to_populate.querySelectorAll(`li:last-of-type > span.endpoint > span[contenteditable]`)
        editables.forEach((editable, idx) => {
          editable.innerText = endpt.editables[idx] || ''
        })
      }
      else clickApiEndpointValid(endpt.endpoint)
    }
    if (get) {
      handleClickGET(...[,false]) // false means don't update query string
    }
  } 
  return endpts
}

async function handleClickGET(event/*ignored*/, update_query_string=true) {
  const endpoints_list = document.getElementById('endpointGET-ol')

  const endpoint_spans = Array.from(endpoints_list.querySelectorAll('span.endpoint'))
  selected_URLs = endpoint_spans.map(span => `https://api.github.com${span.innerText.trim()}`) 

  try {
    // const errors = [];

    responses = await Promise.all(
      selected_URLs.map(endpoint => (
        fetch(endpoint).then(res => res.ok ? res.json() : {ERROR: res.status})
      )
    ));
    json = responses.reduce( (ob, res, idx) => (
      {...ob, [`${idx} ${selected_URLs[idx].slice(22)}`]: objectifyArray(res)}
    ), {});
    const api_response_el = document.getElementById("api-response")
    api_response_el.innerHTML = '';
    renderjson.set_icons("▶", "▼")
    renderjson.set_show_to_level(2)
    api_response_el.appendChild(renderjson(json));
    linkify(handleClickApiEndpointValid, handleClickApiEndpointTemplate);
    // if (errors.length) throw new AggregateError(errors, "fetch failed!");
  }
  catch(err) {
    console.error("WE GOT an ERROR", err);
  }
  finally {
    if (update_query_string) {
      selectedEndpointsToQueryString()
    }
  }
}




var selected_URLs, responses, json;

document.addEventListener("DOMContentLoaded", function() {

  makeEndpointsMenuCollapsible()
  setupEndpointsMenuSelection(clickApiEndpointValid, clickApiEndpointTemplate)
  makeListEditable(document.getElementById('endpointGET-ol'))
  parseQueryStringEndpoints(true, true)  
  document.getElementById('endpointGET-submit').addEventListener('click', handleClickGET)

});
  
</script>
</body>
</html>